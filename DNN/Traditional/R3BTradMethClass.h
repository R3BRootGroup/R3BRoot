// Class that computes the Traditional-Method neutron reconstruction.
// Written by C. A. Douma.

// General directives:
#ifndef R3BTRADMETHCLASS_H
#define R3BTRADMETHCLASS_H

// Include C++ headers:
#include <iostream>

// Include ROOT headers:
#include "TSystem.h"
#include "TROOT.h"
#include "TString.h"
#include "TFile.h"
#include "TMath.h"
#include "TH2D.h"
#include "TObjString.h"
#include "TRandom3.h"

// inclusion of Math headers:
#include "Math/Minimizer.h"
#include "Math/Factory.h"
#include "Math/Functor.h"

// Include R3B headers:
#include "R3BInputClass.h"

// use standard namespace:
using namespace std;

// Define the class:
class R3BTradMethClass
{
public:
    // Constructor (Default):
    R3BTradMethClass();
    
    // Destructor (Default):
    virtual ~R3BTradMethClass();
    
    // Control member functions:
    void Optimization_IncludeZero() {Include_Zero = kTRUE;}
    void Optimization_ExcludeZero() {Include_Zero = kFALSE;}
    
    // Executive Member functions:
    void LinkInputClass(R3BInputClass* inp);// Links this class to the inputs-class, so that input parameters are available.
    void LoadHistograms();                  // Loads the TDR calibration histograms from the data.
    void InitializeCuts();                  // Initializes the cuts & kappa when histograms are loaded.
    void PlotHistograms();                  // Generates a picture of the traditional multiplicity method.
    void OptimizeCuts();                    // Optimizes the current cuts by minimizing sum((1-epsilon)^2).
    void OptimizeCuts_EqualDist();          // Same as before, but the distance between all cuts now remains equal.
    void SaveCuts();                        // Export cuts so they can be re-used later on.
    void LoadCuts();                        // Import cuts from a file generated by SaveCuts() into the class.
    void PrintMatrix();                     // Prints neutron separation matrix as output.
    void Illustrate_EqualDist(Int_t const Resol); // Builds an illustration of the minimization function with equal distances between the cuts. Resol contains the plot resolution.
    void DoMultipleOptimizations(Int_t const nTimes); // Takes an average over multiple computations.
    
    // Error handling:
    void ErrorMessage(TString const Message);
    void PrintAllErrors();
    void DisableErrorPrinting();
    void EnableErrorPrinting();
    Bool_t ContainsNoErrors();    
    
    // Other member functions:
    Double_t HistIntegral(Int_t const Index, Int_t const Range); // Computes the histogram fraction between certain lines.
    TString RoundOff(Double_t const our_input, Int_t const significance); // conversion from Double_t to TString.
    TCanvas* DrawHistDouma_2D_flatArray(Int_t const Nhist, Int_t const Nhor, Int_t const Nvert, TH2D* const Raw[], TString const Title[], TString const xlabel, TString const ylabel, TString const zlabel, Double_t const PlotMin, Double_t const PlotMax); // Plotting function for a full array.
    
private:
    // Class content:
    Bool_t Histograms_Loaded;               // States whether the histograms are available yes/no.
    Bool_t Cuts_Initialized;                // States whether the cuts are initialzed and, therefore, ready for optimization.
    Int_t Max_Multiplicity;                 // Number of histograms to use the traditional method for.
    TH2D** MultHistograms;                  // Contains the histograms that are used to compute the boundaries for determining the multiplicity with the trad. method.
    Double_t* Ethresholds;                  // Horizontal values where the cuts intersects the x-axis (E-axis)
    Double_t Kappa;                         // coefficient of the lines (the cuts).
    Bool_t Include_Zero;                    // includes zero multiplicity in the optimization yes/no.
    Double_t Avg_Kappa;                     // coefficient of the cuts when multiple attempts of optimization are made.
    Double_t* Avg_Ethresholds;              // Horizontal values where the cuts intersects the x-axis (E-axis) when multiple attempts of optimization are made.
    Int_t MinimizerStatus;                  // Status of the minimizer after the minimization is performed.
    
    // Error handling:
    Bool_t PrintErrors;                     // Decides whether errors are printed on-the-fly yes/no.
    std::vector<TString> Errors;            // Error log.
    
    // Input parameters:
    R3BInputClass* Inputs;
    
    // Generate ROOT dictionary:
    ClassDef(R3BTradMethClass, 1);
};

#endif
